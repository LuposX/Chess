@startuml

/' diagram meta data start
config=StructureConfiguration;
{
  "projectClassification": {
    "searchMode": "OpenProject", // OpenProject, AllProjects
    "includedProjects": "",
    "pathEndKeywords": "*.impl",
    "isClientPath": "",
    "isClientName": "",
    "isTestPath": "",
    "isTestName": "",
    "isMappingPath": "",
    "isMappingName": "",
    "isDataAccessPath": "",
    "isDataAccessName": "",
    "isDataStructurePath": "",
    "isDataStructureName": "",
    "isInterfaceStructuresPath": "",
    "isInterfaceStructuresName": "",
    "isEntryPointPath": "",
    "isEntryPointName": ""
  },
  "graphRestriction": {
    "classPackageExcludeFilter": "main;render;pieces",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "removeByInheritance": "", // inheritance/annotation based filtering is done in a second step
    "removeByAnnotation": "",
    "removeByClassPackage": "", // cleanup the graph after inheritance/annotation based filtering is done
    "removeByClassName": "",
    "cutMappings": false,
    "cutEnum": true,
    "cutTests": true,
    "cutClient": true,
    "cutDataAccess": true,
    "cutInterfaceStructures": true,
    "cutDataStructures": true,
    "cutGetterAndSetter": true,
    "cutConstructors": true
  },
  "graphTraversal": {
    "forwardDepth": 3,
    "backwardDepth": 3,
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "hideMappings": false,
    "hideDataStructures": false,
    "hidePrivateMethods": true,
    "hideInterfaceCalls": true, // indirection: implementation -> interface (is hidden) -> implementation
    "onlyShowApplicationEntryPoints": false // root node is included
  },
  "details": {
    "aggregation": "GroupByClass", // ByClass, GroupByClass, None
    "showClassGenericTypes": false,
    "showMethods": false,
    "showMethodParameterNames": false,
    "showMethodParameterTypes": false,
    "showMethodReturnType": false,
    "showPackageLevels": 1,
    "showDetailedClassStructure": false
  },
  "rootClass": "logic.Game"
}
diagram meta data end '/



digraph g {
    rankdir="TB"
    splines=polyline
    

'nodes 
subgraph cluster_103149406 { 
   	label=logic
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   Board103149406[
	label="(C)Board"
	style=filled
	shape=rect
	fillcolor="#FFFFFF"
];

Cell103149406[
	label="(C)Cell"
	style=filled
	shape=rect
	fillcolor="#FFFFFF"
];

Game103149406[
	label="(C)Game"
	style=filled
	shape=rect
	fillcolor="#FFFFFF"
];

Move103149406[
	label="(C)Move"
	style=filled
	shape=rect
	fillcolor="#FFFFFF"
];

Player103149406[
	label="(C)Player"
	style=filled
	shape=rect
	fillcolor="#FFFFFF"
];
} 

'edges    
Board103149406 -> Cell103149406[label="boardArray
[0..*]"];
Game103149406 -> Board103149406[label="board
[0..1]"];
Game103149406 -> Move103149406[label="historyMoves
[0..*]"];
Game103149406 -> Player103149406[label="playerBlack
[0..1]"];
Game103149406 -> Player103149406[label="playerTurn
[0..1]"];
Game103149406 -> Player103149406[label="playerWhite
[0..1]"];
    
}
@enduml