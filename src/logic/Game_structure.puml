@startuml

/' diagram meta data start
config=StructureConfiguration;
{
  "projectClassification": {
    "searchMode": "OpenProject", // OpenProject, AllProjects
    "includedProjects": "",
    "pathEndKeywords": "*.impl",
    "isClientPath": "",
    "isClientName": "",
    "isTestPath": "",
    "isTestName": "",
    "isMappingPath": "",
    "isMappingName": "",
    "isDataAccessPath": "",
    "isDataAccessName": "",
    "isDataStructurePath": "",
    "isDataStructureName": "",
    "isInterfaceStructuresPath": "",
    "isInterfaceStructuresName": "",
    "isEntryPointPath": "",
    "isEntryPointName": ""
  },
  "graphRestriction": {
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "removeByInheritance": "", // inheritance/annotation based filtering is done in a second step
    "removeByAnnotation": "",
    "removeByClassPackage": "", // cleanup the graph after inheritance/annotation based filtering is done
    "removeByClassName": "",
    "cutMappings": false,
    "cutEnum": true,
    "cutTests": true,
    "cutClient": true,
    "cutDataAccess": false,
    "cutInterfaceStructures": false,
    "cutDataStructures": false,
    "cutGetterAndSetter": true,
    "cutConstructors": true
  },
  "graphTraversal": {
    "forwardDepth": 6,
    "backwardDepth": 6,
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "hideMappings": false,
    "hideDataStructures": false,
    "hidePrivateMethods": true,
    "hideInterfaceCalls": true, // indirection: implementation -> interface (is hidden) -> implementation
    "onlyShowApplicationEntryPoints": false // root node is included
  },
  "details": {
    "aggregation": "GroupByClass", // ByClass, GroupByClass, None
    "showClassGenericTypes": true,
    "showMethods": true,
    "showMethodParameterNames": true,
    "showMethodParameterTypes": true,
    "showMethodReturnType": true,
    "showPackageLevels": 2,
    "showDetailedClassStructure": true
  },
  "rootClass": "logic.Game"
}
diagram meta data end '/



digraph g {
    rankdir="TB"
    splines=polyline
    

'nodes 
subgraph cluster_103149406 { 
   	label=logic
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   Board103149406[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Board</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   boardArray: Cell[][] [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   boardSizeX: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   boardSizeY: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   tileSizeInPx: int [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ drawChessBoard(g: Graphics)</TD></TR>
<TR><TD ALIGN="LEFT" >+ drawChessBoard(g: Graphics, r1: int, g1: int, b1: int, a1: int, r2: int, g2: int, b2: int, a2: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ drawPieces(g: Graphics)</TD></TR>
<TR><TD ALIGN="LEFT" >+ resetBoard()</TD></TR>
<TR><TD ALIGN="LEFT" >+ updateBoard(move: Move)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Cell103149406[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Cell</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   X: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   Y: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   piece: Piece [0..1]</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Game103149406[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Game</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   board: Board [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   boardSizeX: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   boardSizeY: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   firstClickPerMoveTry: Boolean [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   firstMouseClickCoordinates: Point [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   historyMoves: ArrayList&lt;Move&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   infoPanel: InfoPanel [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   player1: Player [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   player2: Player [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   playerTurn: Player [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   tileSize: int [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ makeMove(e: MouseEvent, chessPannel: JPanel)</TD></TR>
<TR><TD ALIGN="LEFT" >+ render(g: Graphics)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Move103149406[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Move</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   endPoint: Point [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   isCastlingMove: Boolean [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   isWhite: Boolean [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   piece: Piece [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   startPoint: Point [0..1]</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Player103149406[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Player</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   Points: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   isWhiteSide: boolean [1]</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 

subgraph cluster_934592106 { 
   	label=render
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   ChessPannel934592106[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)ChessPannel</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >#   boardSizeX: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   boardSizeY: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   chessImg: BufferedImage [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   game: Game [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   renderImageBool: Boolean [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   size_X: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   size_Y: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   tileSize: int [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ mouseClicked(e: MouseEvent)</TD></TR>
<TR><TD ALIGN="LEFT" >+ mouseEntered(e: MouseEvent)</TD></TR>
<TR><TD ALIGN="LEFT" >+ mouseExited(e: MouseEvent)</TD></TR>
<TR><TD ALIGN="LEFT" >+ mousePressed(e: MouseEvent)</TD></TR>
<TR><TD ALIGN="LEFT" >+ mouseReleased(e: MouseEvent)</TD></TR>
<TR><TD ALIGN="LEFT" >+ paintComponent(g: Graphics)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

InfoPanel934592106[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)InfoPanel</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   newGame: JButton [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   playerTurnLabel: JLabel [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ actionPerformed(e: ActionEvent)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 

subgraph cluster_988425403 { 
   	label=pieces
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   Bishop988425403[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Bishop</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ isValidPath(curr_x: int, curr_y: int, int_x: int, int_y: int): Boolean</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

King988425403[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)King</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ isValidPath(curr_x: int, curr_y: int, int_x: int, int_y: int): Boolean</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Knight988425403[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Knight</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ isValidPath(curr_x: int, curr_y: int, int_x: int, int_y: int): Boolean</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Pawn988425403[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Pawn</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   firstMove: Boolean [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   isWhite: Boolean [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ isValidPath(curr_x: int, curr_y: int, int_x: int, int_y: int): Boolean</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Piece988425403[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Piece</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   PIECE_VALUE: Integer [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   imagePath: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   img: BufferedImage [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   isWhite: Boolean [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ isValidPath(curr_x: int, curr_y: int, int_x: int, int_y: int): Boolean</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Queen988425403[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Queen</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ isValidPath(curr_x: int, curr_y: int, int_x: int, int_y: int): Boolean</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Rook988425403[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Rook</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ isValidPath(curr_x: int, curr_y: int, int_x: int, int_y: int): Boolean</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 

'edges    
Board103149406 -> Cell103149406[label="boardArray
[0..*]"];
Cell103149406 -> Piece988425403[label="piece
[0..1]"];
ChessPannel934592106 -> Game103149406[label="game
[0..1]"];
Game103149406 -> Board103149406[label="board
[0..1]"];
Game103149406 -> InfoPanel934592106[label="infoPanel
[0..1]"];
Game103149406 -> Move103149406[label="historyMoves
[0..*]"];
Game103149406 -> Player103149406[label="player1
[0..1]"];
Game103149406 -> Player103149406[label="player2
[0..1]"];
Game103149406 -> Player103149406[label="playerTurn
[0..1]"];
Move103149406 -> Piece988425403[label="piece
[0..1]"];
Piece988425403 -> Bishop988425403[arrowhead=none, arrowtail=empty, dir=both];
Piece988425403 -> King988425403[arrowhead=none, arrowtail=empty, dir=both];
Piece988425403 -> Knight988425403[arrowhead=none, arrowtail=empty, dir=both];
Piece988425403 -> Pawn988425403[arrowhead=none, arrowtail=empty, dir=both];
Piece988425403 -> Queen988425403[arrowhead=none, arrowtail=empty, dir=both];
Piece988425403 -> Rook988425403[arrowhead=none, arrowtail=empty, dir=both];
    
}
@enduml